// automatically generated by the FlatBuffers compiler, do not modify

package krypto.serialization;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class TheoreticalSnapshot extends Table {
  public static TheoreticalSnapshot getRootAsTheoreticalSnapshot(ByteBuffer _bb) { return getRootAsTheoreticalSnapshot(_bb, new TheoreticalSnapshot()); }
  public static TheoreticalSnapshot getRootAsTheoreticalSnapshot(ByteBuffer _bb, TheoreticalSnapshot obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public TheoreticalSnapshot __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long timestamp() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long securityId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public double price() { int o = __offset(8); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double error() { int o = __offset(10); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }

  public static int createTheoreticalSnapshot(FlatBufferBuilder builder,
      long timestamp,
      long security_id,
      double price,
      double error) {
    builder.startObject(4);
    TheoreticalSnapshot.addError(builder, error);
    TheoreticalSnapshot.addPrice(builder, price);
    TheoreticalSnapshot.addSecurityId(builder, security_id);
    TheoreticalSnapshot.addTimestamp(builder, timestamp);
    return TheoreticalSnapshot.endTheoreticalSnapshot(builder);
  }

  public static void startTheoreticalSnapshot(FlatBufferBuilder builder) { builder.startObject(4); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(0, timestamp, 0L); }
  public static void addSecurityId(FlatBufferBuilder builder, long securityId) { builder.addLong(1, securityId, 0L); }
  public static void addPrice(FlatBufferBuilder builder, double price) { builder.addDouble(2, price, 0.0); }
  public static void addError(FlatBufferBuilder builder, double error) { builder.addDouble(3, error, 0.0); }
  public static int endTheoreticalSnapshot(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

