namespace krypto.serialization;

// general

enum Side: byte {UNKNOWN, BUY, SELL}

enum OrderSide: byte {UNKNOWN, BID, ASK}

enum OrderStatus: byte {IN_FLIGHT, NEW, ACCEPTED, CANCELLED, REJECTED, FILLED, PARTIALLY_FILLED}

table SequenceNumber {
  value: long;
}

// instruments

enum InstrumentType: byte {UNKNOWN, STOCK, FUTURE, OPTION, FOREX, CRYPTO}

enum Currency : byte {
    UNKNOWN,
    BAT,
    BCH,
    BTC,
    CVC,
    DAI,
    DNT,
    EOS,
    ETC,
    ETH,
    EUR,
    GBP,
    GNT,
    LINK,
    LOOM,
    LTC,
    MANA,
    REP,
    USD,
    USDC,
    XLM,
    XRP,
    ZEC,
    ZRX,
    XTZ
}

enum RequestType: byte {INVALID, ALL, ID, EXCHANGE, PRODUCT}

table Instrument {
  id: long;
  type: InstrumentType;
  symbol: string;
  exchange: string;
  exchange_symbol: string;
  tick_size: double;
  min_size: double;
  max_size: double;
  crypto_base: Currency;
  crypto_quote: Currency;
}

// market data

table Quote {
  timestamp: long;
  security_id: long;
  bid: long;
  ask: long;
  last: long;
  bid_quantity: long;
  ask_quantity: long;
  last_quantity: long;
}

struct SnapshotPriceLevel {
  price: long;
  quantity: long;
}

table Snapshot {
  timestamp: long;
  security_id: long;
  bids: [SnapshotPriceLevel];
  asks: [SnapshotPriceLevel];
}

struct IncrementalPriceLevel {
  price: long;
  quantity: long;
  side: long;
}

table Incremental {
  timestamp: long;
  security_id: long;
  updates: [IncrementalPriceLevel];
}

table Trade {
  timestamp: long;
  security_id: long;
  price: long;
  quantity: long;
  side: Side;
  trade_id: string;
}

table InstrumentRequest {
  type: RequestType;
}

table InstrumentResponse {
  instruments: [Instrument];
}

// orders

table OrderRequest {
  timestamp: long;
  security_id: long;
  price: long;
  quantity: long;
  side: Side;
  order_id: string;
}

table OrderUpdate {
  timestamp: long;
  order_id: string;
  status: OrderStatus;
  filled_quantity: long;
}

table Order {
  request: OrderRequest;
  updates: [OrderUpdate];
  fees: double;
}

struct Position {
  security_id: long;
  position: long;
}

table RiskSummary {
  timestamp: long;
  positions: [Position];
  pnl: double;
}
